#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GTSdb")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertCoInfo(CoInfo instance);
  partial void UpdateCoInfo(CoInfo instance);
  partial void DeleteCoInfo(CoInfo instance);
  partial void InsertUserRole(UserRole instance);
  partial void UpdateUserRole(UserRole instance);
  partial void DeleteUserRole(UserRole instance);
  partial void InsertContact(Contact instance);
  partial void UpdateContact(Contact instance);
  partial void DeleteContact(Contact instance);
  partial void InsertCountry(Country instance);
  partial void UpdateCountry(Country instance);
  partial void DeleteCountry(Country instance);
  partial void InsertEvent(Event instance);
  partial void UpdateEvent(Event instance);
  partial void DeleteEvent(Event instance);
  partial void InsertHotel(Hotel instance);
  partial void UpdateHotel(Hotel instance);
  partial void DeleteHotel(Hotel instance);
  partial void InsertLocation(Location instance);
  partial void UpdateLocation(Location instance);
  partial void DeleteLocation(Location instance);
  partial void InsertRole(Role instance);
  partial void UpdateRole(Role instance);
  partial void DeleteRole(Role instance);
  partial void InsertTourGroup(TourGroup instance);
  partial void UpdateTourGroup(TourGroup instance);
  partial void DeleteTourGroup(TourGroup instance);
  partial void InsertTourHotel(TourHotel instance);
  partial void UpdateTourHotel(TourHotel instance);
  partial void DeleteTourHotel(TourHotel instance);
  partial void InsertTourKind(TourKind instance);
  partial void UpdateTourKind(TourKind instance);
  partial void DeleteTourKind(TourKind instance);
  partial void InsertTourReg(TourReg instance);
  partial void UpdateTourReg(TourReg instance);
  partial void DeleteTourReg(TourReg instance);
  partial void InsertTour(Tour instance);
  partial void UpdateTour(Tour instance);
  partial void DeleteTour(Tour instance);
  partial void InsertTours_TourKind(Tours_TourKind instance);
  partial void UpdateTours_TourKind(Tours_TourKind instance);
  partial void DeleteTours_TourKind(Tours_TourKind instance);
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["GTSdbConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<CoInfo> CoInfos
	{
		get
		{
			return this.GetTable<CoInfo>();
		}
	}
	
	public System.Data.Linq.Table<UserRole> UserRoles
	{
		get
		{
			return this.GetTable<UserRole>();
		}
	}
	
	public System.Data.Linq.Table<Contact> Contacts
	{
		get
		{
			return this.GetTable<Contact>();
		}
	}
	
	public System.Data.Linq.Table<Country> Countries
	{
		get
		{
			return this.GetTable<Country>();
		}
	}
	
	public System.Data.Linq.Table<Event> Events
	{
		get
		{
			return this.GetTable<Event>();
		}
	}
	
	public System.Data.Linq.Table<Hotel> Hotels
	{
		get
		{
			return this.GetTable<Hotel>();
		}
	}
	
	public System.Data.Linq.Table<Location> Locations
	{
		get
		{
			return this.GetTable<Location>();
		}
	}
	
	public System.Data.Linq.Table<Role> Roles
	{
		get
		{
			return this.GetTable<Role>();
		}
	}
	
	public System.Data.Linq.Table<TourGroup> TourGroups
	{
		get
		{
			return this.GetTable<TourGroup>();
		}
	}
	
	public System.Data.Linq.Table<TourHotel> TourHotels
	{
		get
		{
			return this.GetTable<TourHotel>();
		}
	}
	
	public System.Data.Linq.Table<TourKind> TourKinds
	{
		get
		{
			return this.GetTable<TourKind>();
		}
	}
	
	public System.Data.Linq.Table<TourReg> TourRegs
	{
		get
		{
			return this.GetTable<TourReg>();
		}
	}
	
	public System.Data.Linq.Table<Tour> Tours
	{
		get
		{
			return this.GetTable<Tour>();
		}
	}
	
	public System.Data.Linq.Table<Tours_TourKind> Tours_TourKinds
	{
		get
		{
			return this.GetTable<Tours_TourKind>();
		}
	}
	
	public System.Data.Linq.Table<User> Users
	{
		get
		{
			return this.GetTable<User>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CoInfo")]
public partial class CoInfo : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _InfoId;
	
	private string _Description;
	
	private System.Nullable<bool> _IsActive;
	
	private System.Nullable<System.DateTime> _LastUpdt;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInfoIdChanging(int value);
    partial void OnInfoIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    partial void OnLastUpdtChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdtChanged();
    #endregion
	
	public CoInfo()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InfoId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int InfoId
	{
		get
		{
			return this._InfoId;
		}
		set
		{
			if ((this._InfoId != value))
			{
				this.OnInfoIdChanging(value);
				this.SendPropertyChanging();
				this._InfoId = value;
				this.SendPropertyChanged("InfoId");
				this.OnInfoIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
	public System.Nullable<bool> IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdt", DbType="Date")]
	public System.Nullable<System.DateTime> LastUpdt
	{
		get
		{
			return this._LastUpdt;
		}
		set
		{
			if ((this._LastUpdt != value))
			{
				this.OnLastUpdtChanging(value);
				this.SendPropertyChanging();
				this._LastUpdt = value;
				this.SendPropertyChanged("LastUpdt");
				this.OnLastUpdtChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRoles")]
public partial class UserRole : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Uid;
	
	private int _RoleId;
	
	private System.Nullable<bool> _IsActive;
	
	private EntityRef<Role> _Role;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUidChanging(int value);
    partial void OnUidChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    #endregion
	
	public UserRole()
	{
		this._Role = default(EntityRef<Role>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uid", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int Uid
	{
		get
		{
			return this._Uid;
		}
		set
		{
			if ((this._Uid != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUidChanging(value);
				this.SendPropertyChanging();
				this._Uid = value;
				this.SendPropertyChanged("Uid");
				this.OnUidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int RoleId
	{
		get
		{
			return this._RoleId;
		}
		set
		{
			if ((this._RoleId != value))
			{
				if (this._Role.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRoleIdChanging(value);
				this.SendPropertyChanging();
				this._RoleId = value;
				this.SendPropertyChanged("RoleId");
				this.OnRoleIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
	public System.Nullable<bool> IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
	public Role Role
	{
		get
		{
			return this._Role.Entity;
		}
		set
		{
			Role previousValue = this._Role.Entity;
			if (((previousValue != value) 
						|| (this._Role.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Role.Entity = null;
					previousValue.UserRoles.Remove(this);
				}
				this._Role.Entity = value;
				if ((value != null))
				{
					value.UserRoles.Add(this);
					this._RoleId = value.RoleId;
				}
				else
				{
					this._RoleId = default(int);
				}
				this.SendPropertyChanged("Role");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_User", ThisKey="Uid", OtherKey="Uid", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.UserRoles.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.UserRoles.Add(this);
					this._Uid = value.Uid;
				}
				else
				{
					this._Uid = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contacts")]
public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ContactId;
	
	private string _Name;
	
	private string _Address;
	
	private string _Email;
	
	private string _Phone;
	
	private string _Contents;
	
	private System.Nullable<System.DateTime> _ContactDate;
	
	private System.Nullable<bool> _IsSolved;
	
	private System.Nullable<System.DateTime> _LastUpdt;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactIdChanging(int value);
    partial void OnContactIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnContentsChanging(string value);
    partial void OnContentsChanged();
    partial void OnContactDateChanging(System.Nullable<System.DateTime> value);
    partial void OnContactDateChanged();
    partial void OnIsSolvedChanging(System.Nullable<bool> value);
    partial void OnIsSolvedChanged();
    partial void OnLastUpdtChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdtChanged();
    #endregion
	
	public Contact()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ContactId
	{
		get
		{
			return this._ContactId;
		}
		set
		{
			if ((this._ContactId != value))
			{
				this.OnContactIdChanging(value);
				this.SendPropertyChanging();
				this._ContactId = value;
				this.SendPropertyChanged("ContactId");
				this.OnContactIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(1000)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contents", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Contents
	{
		get
		{
			return this._Contents;
		}
		set
		{
			if ((this._Contents != value))
			{
				this.OnContentsChanging(value);
				this.SendPropertyChanging();
				this._Contents = value;
				this.SendPropertyChanged("Contents");
				this.OnContentsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactDate", DbType="Date")]
	public System.Nullable<System.DateTime> ContactDate
	{
		get
		{
			return this._ContactDate;
		}
		set
		{
			if ((this._ContactDate != value))
			{
				this.OnContactDateChanging(value);
				this.SendPropertyChanging();
				this._ContactDate = value;
				this.SendPropertyChanged("ContactDate");
				this.OnContactDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSolved", DbType="Bit")]
	public System.Nullable<bool> IsSolved
	{
		get
		{
			return this._IsSolved;
		}
		set
		{
			if ((this._IsSolved != value))
			{
				this.OnIsSolvedChanging(value);
				this.SendPropertyChanging();
				this._IsSolved = value;
				this.SendPropertyChanged("IsSolved");
				this.OnIsSolvedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdt", DbType="Date")]
	public System.Nullable<System.DateTime> LastUpdt
	{
		get
		{
			return this._LastUpdt;
		}
		set
		{
			if ((this._LastUpdt != value))
			{
				this.OnLastUpdtChanging(value);
				this.SendPropertyChanging();
				this._LastUpdt = value;
				this.SendPropertyChanged("LastUpdt");
				this.OnLastUpdtChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Country")]
public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CountryId;
	
	private string _CountryNm;
	
	private string _Description;
	
	private EntitySet<Location> _Locations;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIdChanging(int value);
    partial void OnCountryIdChanged();
    partial void OnCountryNmChanging(string value);
    partial void OnCountryNmChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
	
	public Country()
	{
		this._Locations = new EntitySet<Location>(new Action<Location>(this.attach_Locations), new Action<Location>(this.detach_Locations));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int CountryId
	{
		get
		{
			return this._CountryId;
		}
		set
		{
			if ((this._CountryId != value))
			{
				this.OnCountryIdChanging(value);
				this.SendPropertyChanging();
				this._CountryId = value;
				this.SendPropertyChanged("CountryId");
				this.OnCountryIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryNm", DbType="NVarChar(250)")]
	public string CountryNm
	{
		get
		{
			return this._CountryNm;
		}
		set
		{
			if ((this._CountryNm != value))
			{
				this.OnCountryNmChanging(value);
				this.SendPropertyChanging();
				this._CountryNm = value;
				this.SendPropertyChanged("CountryNm");
				this.OnCountryNmChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Location", Storage="_Locations", ThisKey="CountryId", OtherKey="CountryId")]
	public EntitySet<Location> Locations
	{
		get
		{
			return this._Locations;
		}
		set
		{
			this._Locations.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Locations(Location entity)
	{
		this.SendPropertyChanging();
		entity.Country = this;
	}
	
	private void detach_Locations(Location entity)
	{
		this.SendPropertyChanging();
		entity.Country = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Events")]
public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _EventId;
	
	private string _EventNm;
	
	private string _Description;
	
	private System.Nullable<System.DateTime> _FromDate;
	
	private System.Nullable<System.DateTime> _ToDate;
	
	private System.Nullable<int> _LocaId;
	
	private System.Nullable<bool> _IsActive;
	
	private EntityRef<Location> _Location;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIdChanging(int value);
    partial void OnEventIdChanged();
    partial void OnEventNmChanging(string value);
    partial void OnEventNmChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnFromDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFromDateChanged();
    partial void OnToDateChanging(System.Nullable<System.DateTime> value);
    partial void OnToDateChanged();
    partial void OnLocaIdChanging(System.Nullable<int> value);
    partial void OnLocaIdChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    #endregion
	
	public Event()
	{
		this._Location = default(EntityRef<Location>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int EventId
	{
		get
		{
			return this._EventId;
		}
		set
		{
			if ((this._EventId != value))
			{
				this.OnEventIdChanging(value);
				this.SendPropertyChanging();
				this._EventId = value;
				this.SendPropertyChanged("EventId");
				this.OnEventIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventNm", DbType="NVarChar(250)")]
	public string EventNm
	{
		get
		{
			return this._EventNm;
		}
		set
		{
			if ((this._EventNm != value))
			{
				this.OnEventNmChanging(value);
				this.SendPropertyChanging();
				this._EventNm = value;
				this.SendPropertyChanged("EventNm");
				this.OnEventNmChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromDate", DbType="Date")]
	public System.Nullable<System.DateTime> FromDate
	{
		get
		{
			return this._FromDate;
		}
		set
		{
			if ((this._FromDate != value))
			{
				this.OnFromDateChanging(value);
				this.SendPropertyChanging();
				this._FromDate = value;
				this.SendPropertyChanged("FromDate");
				this.OnFromDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToDate", DbType="Date")]
	public System.Nullable<System.DateTime> ToDate
	{
		get
		{
			return this._ToDate;
		}
		set
		{
			if ((this._ToDate != value))
			{
				this.OnToDateChanging(value);
				this.SendPropertyChanging();
				this._ToDate = value;
				this.SendPropertyChanged("ToDate");
				this.OnToDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocaId", DbType="Int")]
	public System.Nullable<int> LocaId
	{
		get
		{
			return this._LocaId;
		}
		set
		{
			if ((this._LocaId != value))
			{
				if (this._Location.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnLocaIdChanging(value);
				this.SendPropertyChanging();
				this._LocaId = value;
				this.SendPropertyChanged("LocaId");
				this.OnLocaIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
	public System.Nullable<bool> IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Event", Storage="_Location", ThisKey="LocaId", OtherKey="LocaId", IsForeignKey=true)]
	public Location Location
	{
		get
		{
			return this._Location.Entity;
		}
		set
		{
			Location previousValue = this._Location.Entity;
			if (((previousValue != value) 
						|| (this._Location.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Location.Entity = null;
					previousValue.Events.Remove(this);
				}
				this._Location.Entity = value;
				if ((value != null))
				{
					value.Events.Add(this);
					this._LocaId = value.LocaId;
				}
				else
				{
					this._LocaId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Location");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hotel")]
public partial class Hotel : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _HotelId;
	
	private string _HotelNm;
	
	private string _Description;
	
	private System.Nullable<short> _Star;
	
	private string _Price;
	
	private string _PicPath1;
	
	private string _PicPath2;
	
	private System.Nullable<int> _LocaId;
	
	private System.Nullable<bool> _IsActive;
	
	private EntityRef<Location> _Location;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHotelIdChanging(int value);
    partial void OnHotelIdChanged();
    partial void OnHotelNmChanging(string value);
    partial void OnHotelNmChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStarChanging(System.Nullable<short> value);
    partial void OnStarChanged();
    partial void OnPriceChanging(string value);
    partial void OnPriceChanged();
    partial void OnPicPath1Changing(string value);
    partial void OnPicPath1Changed();
    partial void OnPicPath2Changing(string value);
    partial void OnPicPath2Changed();
    partial void OnLocaIdChanging(System.Nullable<int> value);
    partial void OnLocaIdChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    #endregion
	
	public Hotel()
	{
		this._Location = default(EntityRef<Location>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int HotelId
	{
		get
		{
			return this._HotelId;
		}
		set
		{
			if ((this._HotelId != value))
			{
				this.OnHotelIdChanging(value);
				this.SendPropertyChanging();
				this._HotelId = value;
				this.SendPropertyChanged("HotelId");
				this.OnHotelIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelNm", DbType="NVarChar(250)")]
	public string HotelNm
	{
		get
		{
			return this._HotelNm;
		}
		set
		{
			if ((this._HotelNm != value))
			{
				this.OnHotelNmChanging(value);
				this.SendPropertyChanging();
				this._HotelNm = value;
				this.SendPropertyChanged("HotelNm");
				this.OnHotelNmChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Star", DbType="SmallInt")]
	public System.Nullable<short> Star
	{
		get
		{
			return this._Star;
		}
		set
		{
			if ((this._Star != value))
			{
				this.OnStarChanging(value);
				this.SendPropertyChanging();
				this._Star = value;
				this.SendPropertyChanged("Star");
				this.OnStarChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="NVarChar(50)")]
	public string Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this.OnPriceChanging(value);
				this.SendPropertyChanging();
				this._Price = value;
				this.SendPropertyChanged("Price");
				this.OnPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PicPath1", DbType="NVarChar(50)")]
	public string PicPath1
	{
		get
		{
			return this._PicPath1;
		}
		set
		{
			if ((this._PicPath1 != value))
			{
				this.OnPicPath1Changing(value);
				this.SendPropertyChanging();
				this._PicPath1 = value;
				this.SendPropertyChanged("PicPath1");
				this.OnPicPath1Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PicPath2", DbType="NVarChar(50)")]
	public string PicPath2
	{
		get
		{
			return this._PicPath2;
		}
		set
		{
			if ((this._PicPath2 != value))
			{
				this.OnPicPath2Changing(value);
				this.SendPropertyChanging();
				this._PicPath2 = value;
				this.SendPropertyChanged("PicPath2");
				this.OnPicPath2Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocaId", DbType="Int")]
	public System.Nullable<int> LocaId
	{
		get
		{
			return this._LocaId;
		}
		set
		{
			if ((this._LocaId != value))
			{
				if (this._Location.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnLocaIdChanging(value);
				this.SendPropertyChanging();
				this._LocaId = value;
				this.SendPropertyChanged("LocaId");
				this.OnLocaIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
	public System.Nullable<bool> IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Hotel", Storage="_Location", ThisKey="LocaId", OtherKey="LocaId", IsForeignKey=true)]
	public Location Location
	{
		get
		{
			return this._Location.Entity;
		}
		set
		{
			Location previousValue = this._Location.Entity;
			if (((previousValue != value) 
						|| (this._Location.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Location.Entity = null;
					previousValue.Hotels.Remove(this);
				}
				this._Location.Entity = value;
				if ((value != null))
				{
					value.Hotels.Add(this);
					this._LocaId = value.LocaId;
				}
				else
				{
					this._LocaId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Location");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Location")]
public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _LocaId;
	
	private string _LocaNm;
	
	private string _Description;
	
	private System.Nullable<int> _CountryId;
	
	private System.Nullable<bool> _IsActive;
	
	private EntitySet<Event> _Events;
	
	private EntitySet<Hotel> _Hotels;
	
	private EntitySet<Tour> _Tours;
	
	private EntityRef<Country> _Country;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocaIdChanging(int value);
    partial void OnLocaIdChanged();
    partial void OnLocaNmChanging(string value);
    partial void OnLocaNmChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCountryIdChanging(System.Nullable<int> value);
    partial void OnCountryIdChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    #endregion
	
	public Location()
	{
		this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
		this._Hotels = new EntitySet<Hotel>(new Action<Hotel>(this.attach_Hotels), new Action<Hotel>(this.detach_Hotels));
		this._Tours = new EntitySet<Tour>(new Action<Tour>(this.attach_Tours), new Action<Tour>(this.detach_Tours));
		this._Country = default(EntityRef<Country>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocaId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int LocaId
	{
		get
		{
			return this._LocaId;
		}
		set
		{
			if ((this._LocaId != value))
			{
				this.OnLocaIdChanging(value);
				this.SendPropertyChanging();
				this._LocaId = value;
				this.SendPropertyChanged("LocaId");
				this.OnLocaIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocaNm", DbType="NVarChar(250)")]
	public string LocaNm
	{
		get
		{
			return this._LocaNm;
		}
		set
		{
			if ((this._LocaNm != value))
			{
				this.OnLocaNmChanging(value);
				this.SendPropertyChanging();
				this._LocaNm = value;
				this.SendPropertyChanged("LocaNm");
				this.OnLocaNmChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="Int")]
	public System.Nullable<int> CountryId
	{
		get
		{
			return this._CountryId;
		}
		set
		{
			if ((this._CountryId != value))
			{
				if (this._Country.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCountryIdChanging(value);
				this.SendPropertyChanging();
				this._CountryId = value;
				this.SendPropertyChanged("CountryId");
				this.OnCountryIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
	public System.Nullable<bool> IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Event", Storage="_Events", ThisKey="LocaId", OtherKey="LocaId")]
	public EntitySet<Event> Events
	{
		get
		{
			return this._Events;
		}
		set
		{
			this._Events.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Hotel", Storage="_Hotels", ThisKey="LocaId", OtherKey="LocaId")]
	public EntitySet<Hotel> Hotels
	{
		get
		{
			return this._Hotels;
		}
		set
		{
			this._Hotels.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Tour", Storage="_Tours", ThisKey="LocaId", OtherKey="LocaId")]
	public EntitySet<Tour> Tours
	{
		get
		{
			return this._Tours;
		}
		set
		{
			this._Tours.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Location", Storage="_Country", ThisKey="CountryId", OtherKey="CountryId", IsForeignKey=true)]
	public Country Country
	{
		get
		{
			return this._Country.Entity;
		}
		set
		{
			Country previousValue = this._Country.Entity;
			if (((previousValue != value) 
						|| (this._Country.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Country.Entity = null;
					previousValue.Locations.Remove(this);
				}
				this._Country.Entity = value;
				if ((value != null))
				{
					value.Locations.Add(this);
					this._CountryId = value.CountryId;
				}
				else
				{
					this._CountryId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Country");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Events(Event entity)
	{
		this.SendPropertyChanging();
		entity.Location = this;
	}
	
	private void detach_Events(Event entity)
	{
		this.SendPropertyChanging();
		entity.Location = null;
	}
	
	private void attach_Hotels(Hotel entity)
	{
		this.SendPropertyChanging();
		entity.Location = this;
	}
	
	private void detach_Hotels(Hotel entity)
	{
		this.SendPropertyChanging();
		entity.Location = null;
	}
	
	private void attach_Tours(Tour entity)
	{
		this.SendPropertyChanging();
		entity.Location = this;
	}
	
	private void detach_Tours(Tour entity)
	{
		this.SendPropertyChanging();
		entity.Location = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _RoleId;
	
	private string _RoleNm;
	
	private string _Description;
	
	private EntitySet<UserRole> _UserRoles;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnRoleNmChanging(string value);
    partial void OnRoleNmChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
	
	public Role()
	{
		this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int RoleId
	{
		get
		{
			return this._RoleId;
		}
		set
		{
			if ((this._RoleId != value))
			{
				this.OnRoleIdChanging(value);
				this.SendPropertyChanging();
				this._RoleId = value;
				this.SendPropertyChanged("RoleId");
				this.OnRoleIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleNm", DbType="NVarChar(250)")]
	public string RoleNm
	{
		get
		{
			return this._RoleNm;
		}
		set
		{
			if ((this._RoleNm != value))
			{
				this.OnRoleNmChanging(value);
				this.SendPropertyChanging();
				this._RoleNm = value;
				this.SendPropertyChanged("RoleNm");
				this.OnRoleNmChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(1000)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_UserRoles", ThisKey="RoleId", OtherKey="RoleId")]
	public EntitySet<UserRole> UserRoles
	{
		get
		{
			return this._UserRoles;
		}
		set
		{
			this._UserRoles.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_UserRoles(UserRole entity)
	{
		this.SendPropertyChanging();
		entity.Role = this;
	}
	
	private void detach_UserRoles(UserRole entity)
	{
		this.SendPropertyChanging();
		entity.Role = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TourGroups")]
public partial class TourGroup : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _TourGroupId;
	
	private string _TourGroupNm;
	
	private string _Description;
	
	private System.Nullable<bool> _IsActive;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTourGroupIdChanging(int value);
    partial void OnTourGroupIdChanged();
    partial void OnTourGroupNmChanging(string value);
    partial void OnTourGroupNmChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    #endregion
	
	public TourGroup()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourGroupId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int TourGroupId
	{
		get
		{
			return this._TourGroupId;
		}
		set
		{
			if ((this._TourGroupId != value))
			{
				this.OnTourGroupIdChanging(value);
				this.SendPropertyChanging();
				this._TourGroupId = value;
				this.SendPropertyChanged("TourGroupId");
				this.OnTourGroupIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourGroupNm", DbType="NVarChar(250)")]
	public string TourGroupNm
	{
		get
		{
			return this._TourGroupNm;
		}
		set
		{
			if ((this._TourGroupNm != value))
			{
				this.OnTourGroupNmChanging(value);
				this.SendPropertyChanging();
				this._TourGroupNm = value;
				this.SendPropertyChanged("TourGroupNm");
				this.OnTourGroupNmChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
	public System.Nullable<bool> IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TourHotel")]
public partial class TourHotel : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _TourId;
	
	private int _HotelId;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTourIdChanging(int value);
    partial void OnTourIdChanged();
    partial void OnHotelIdChanging(int value);
    partial void OnHotelIdChanged();
    #endregion
	
	public TourHotel()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourId", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int TourId
	{
		get
		{
			return this._TourId;
		}
		set
		{
			if ((this._TourId != value))
			{
				this.OnTourIdChanging(value);
				this.SendPropertyChanging();
				this._TourId = value;
				this.SendPropertyChanged("TourId");
				this.OnTourIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelId", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int HotelId
	{
		get
		{
			return this._HotelId;
		}
		set
		{
			if ((this._HotelId != value))
			{
				this.OnHotelIdChanging(value);
				this.SendPropertyChanging();
				this._HotelId = value;
				this.SendPropertyChanged("HotelId");
				this.OnHotelIdChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TourKinds")]
public partial class TourKind : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _TourKindId;
	
	private string _TourKindNm;
	
	private string _Description;
	
	private System.Nullable<int> _TourGroupId;
	
	private System.Nullable<bool> _IsActive;
	
	private EntitySet<Tours_TourKind> _Tours_TourKinds;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTourKindIdChanging(int value);
    partial void OnTourKindIdChanged();
    partial void OnTourKindNmChanging(string value);
    partial void OnTourKindNmChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTourGroupIdChanging(System.Nullable<int> value);
    partial void OnTourGroupIdChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    #endregion
	
	public TourKind()
	{
		this._Tours_TourKinds = new EntitySet<Tours_TourKind>(new Action<Tours_TourKind>(this.attach_Tours_TourKinds), new Action<Tours_TourKind>(this.detach_Tours_TourKinds));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourKindId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int TourKindId
	{
		get
		{
			return this._TourKindId;
		}
		set
		{
			if ((this._TourKindId != value))
			{
				this.OnTourKindIdChanging(value);
				this.SendPropertyChanging();
				this._TourKindId = value;
				this.SendPropertyChanged("TourKindId");
				this.OnTourKindIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourKindNm", DbType="NVarChar(250)")]
	public string TourKindNm
	{
		get
		{
			return this._TourKindNm;
		}
		set
		{
			if ((this._TourKindNm != value))
			{
				this.OnTourKindNmChanging(value);
				this.SendPropertyChanging();
				this._TourKindNm = value;
				this.SendPropertyChanged("TourKindNm");
				this.OnTourKindNmChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourGroupId", DbType="Int")]
	public System.Nullable<int> TourGroupId
	{
		get
		{
			return this._TourGroupId;
		}
		set
		{
			if ((this._TourGroupId != value))
			{
				this.OnTourGroupIdChanging(value);
				this.SendPropertyChanging();
				this._TourGroupId = value;
				this.SendPropertyChanged("TourGroupId");
				this.OnTourGroupIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
	public System.Nullable<bool> IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TourKind_Tours_TourKind", Storage="_Tours_TourKinds", ThisKey="TourKindId", OtherKey="TourKindId")]
	public EntitySet<Tours_TourKind> Tours_TourKinds
	{
		get
		{
			return this._Tours_TourKinds;
		}
		set
		{
			this._Tours_TourKinds.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Tours_TourKinds(Tours_TourKind entity)
	{
		this.SendPropertyChanging();
		entity.TourKind = this;
	}
	
	private void detach_Tours_TourKinds(Tours_TourKind entity)
	{
		this.SendPropertyChanging();
		entity.TourKind = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TourReg")]
public partial class TourReg : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _TourRegId;
	
	private string _PlaceNm;
	
	private System.Nullable<System.DateTime> _FromDate;
	
	private System.Nullable<System.DateTime> _ToDate;
	
	private string _Hotel;
	
	private System.Nullable<int> _Adult;
	
	private System.Nullable<int> _Child;
	
	private string _Phone;
	
	private string _Address;
	
	private string _TourGuide;
	
	private System.Nullable<int> _Trans;
	
	private System.Nullable<System.DateTime> _LastUpdt;
	
	private System.Nullable<bool> _IsSolved;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTourRegIdChanging(string value);
    partial void OnTourRegIdChanged();
    partial void OnPlaceNmChanging(string value);
    partial void OnPlaceNmChanged();
    partial void OnFromDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFromDateChanged();
    partial void OnToDateChanging(System.Nullable<System.DateTime> value);
    partial void OnToDateChanged();
    partial void OnHotelChanging(string value);
    partial void OnHotelChanged();
    partial void OnAdultChanging(System.Nullable<int> value);
    partial void OnAdultChanged();
    partial void OnChildChanging(System.Nullable<int> value);
    partial void OnChildChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnTourGuideChanging(string value);
    partial void OnTourGuideChanged();
    partial void OnTransChanging(System.Nullable<int> value);
    partial void OnTransChanged();
    partial void OnLastUpdtChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdtChanged();
    partial void OnIsSolvedChanging(System.Nullable<bool> value);
    partial void OnIsSolvedChanged();
    #endregion
	
	public TourReg()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourRegId", DbType="Char(36) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string TourRegId
	{
		get
		{
			return this._TourRegId;
		}
		set
		{
			if ((this._TourRegId != value))
			{
				this.OnTourRegIdChanging(value);
				this.SendPropertyChanging();
				this._TourRegId = value;
				this.SendPropertyChanged("TourRegId");
				this.OnTourRegIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlaceNm", DbType="NVarChar(250)")]
	public string PlaceNm
	{
		get
		{
			return this._PlaceNm;
		}
		set
		{
			if ((this._PlaceNm != value))
			{
				this.OnPlaceNmChanging(value);
				this.SendPropertyChanging();
				this._PlaceNm = value;
				this.SendPropertyChanged("PlaceNm");
				this.OnPlaceNmChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromDate", DbType="Date")]
	public System.Nullable<System.DateTime> FromDate
	{
		get
		{
			return this._FromDate;
		}
		set
		{
			if ((this._FromDate != value))
			{
				this.OnFromDateChanging(value);
				this.SendPropertyChanging();
				this._FromDate = value;
				this.SendPropertyChanged("FromDate");
				this.OnFromDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToDate", DbType="Date")]
	public System.Nullable<System.DateTime> ToDate
	{
		get
		{
			return this._ToDate;
		}
		set
		{
			if ((this._ToDate != value))
			{
				this.OnToDateChanging(value);
				this.SendPropertyChanging();
				this._ToDate = value;
				this.SendPropertyChanged("ToDate");
				this.OnToDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hotel", DbType="NVarChar(250)")]
	public string Hotel
	{
		get
		{
			return this._Hotel;
		}
		set
		{
			if ((this._Hotel != value))
			{
				this.OnHotelChanging(value);
				this.SendPropertyChanging();
				this._Hotel = value;
				this.SendPropertyChanged("Hotel");
				this.OnHotelChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adult", DbType="Int")]
	public System.Nullable<int> Adult
	{
		get
		{
			return this._Adult;
		}
		set
		{
			if ((this._Adult != value))
			{
				this.OnAdultChanging(value);
				this.SendPropertyChanging();
				this._Adult = value;
				this.SendPropertyChanged("Adult");
				this.OnAdultChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Child", DbType="Int")]
	public System.Nullable<int> Child
	{
		get
		{
			return this._Child;
		}
		set
		{
			if ((this._Child != value))
			{
				this.OnChildChanging(value);
				this.SendPropertyChanging();
				this._Child = value;
				this.SendPropertyChanged("Child");
				this.OnChildChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(250)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourGuide", DbType="NVarChar(50)")]
	public string TourGuide
	{
		get
		{
			return this._TourGuide;
		}
		set
		{
			if ((this._TourGuide != value))
			{
				this.OnTourGuideChanging(value);
				this.SendPropertyChanging();
				this._TourGuide = value;
				this.SendPropertyChanged("TourGuide");
				this.OnTourGuideChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Trans", DbType="Int")]
	public System.Nullable<int> Trans
	{
		get
		{
			return this._Trans;
		}
		set
		{
			if ((this._Trans != value))
			{
				this.OnTransChanging(value);
				this.SendPropertyChanging();
				this._Trans = value;
				this.SendPropertyChanged("Trans");
				this.OnTransChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdt", DbType="Date")]
	public System.Nullable<System.DateTime> LastUpdt
	{
		get
		{
			return this._LastUpdt;
		}
		set
		{
			if ((this._LastUpdt != value))
			{
				this.OnLastUpdtChanging(value);
				this.SendPropertyChanging();
				this._LastUpdt = value;
				this.SendPropertyChanged("LastUpdt");
				this.OnLastUpdtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSolved", DbType="Bit")]
	public System.Nullable<bool> IsSolved
	{
		get
		{
			return this._IsSolved;
		}
		set
		{
			if ((this._IsSolved != value))
			{
				this.OnIsSolvedChanging(value);
				this.SendPropertyChanging();
				this._IsSolved = value;
				this.SendPropertyChanged("IsSolved");
				this.OnIsSolvedChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tours")]
public partial class Tour : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _TourId;
	
	private string _TourNm;
	
	private string _DescReview;
	
	private string _Description;
	
	private System.Nullable<int> _LocaId;
	
	private System.Nullable<int> _HotelId;
	
	private System.Nullable<bool> _IsActive;
	
	private EntitySet<Tours_TourKind> _Tours_TourKinds;
	
	private EntityRef<Location> _Location;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTourIdChanging(int value);
    partial void OnTourIdChanged();
    partial void OnTourNmChanging(string value);
    partial void OnTourNmChanged();
    partial void OnDescReviewChanging(string value);
    partial void OnDescReviewChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnLocaIdChanging(System.Nullable<int> value);
    partial void OnLocaIdChanged();
    partial void OnHotelIdChanging(System.Nullable<int> value);
    partial void OnHotelIdChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    #endregion
	
	public Tour()
	{
		this._Tours_TourKinds = new EntitySet<Tours_TourKind>(new Action<Tours_TourKind>(this.attach_Tours_TourKinds), new Action<Tours_TourKind>(this.detach_Tours_TourKinds));
		this._Location = default(EntityRef<Location>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int TourId
	{
		get
		{
			return this._TourId;
		}
		set
		{
			if ((this._TourId != value))
			{
				this.OnTourIdChanging(value);
				this.SendPropertyChanging();
				this._TourId = value;
				this.SendPropertyChanged("TourId");
				this.OnTourIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourNm", DbType="NVarChar(250)")]
	public string TourNm
	{
		get
		{
			return this._TourNm;
		}
		set
		{
			if ((this._TourNm != value))
			{
				this.OnTourNmChanging(value);
				this.SendPropertyChanging();
				this._TourNm = value;
				this.SendPropertyChanged("TourNm");
				this.OnTourNmChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescReview", DbType="NVarChar(2000)")]
	public string DescReview
	{
		get
		{
			return this._DescReview;
		}
		set
		{
			if ((this._DescReview != value))
			{
				this.OnDescReviewChanging(value);
				this.SendPropertyChanging();
				this._DescReview = value;
				this.SendPropertyChanged("DescReview");
				this.OnDescReviewChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocaId", DbType="Int")]
	public System.Nullable<int> LocaId
	{
		get
		{
			return this._LocaId;
		}
		set
		{
			if ((this._LocaId != value))
			{
				if (this._Location.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnLocaIdChanging(value);
				this.SendPropertyChanging();
				this._LocaId = value;
				this.SendPropertyChanged("LocaId");
				this.OnLocaIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelId", DbType="Int")]
	public System.Nullable<int> HotelId
	{
		get
		{
			return this._HotelId;
		}
		set
		{
			if ((this._HotelId != value))
			{
				this.OnHotelIdChanging(value);
				this.SendPropertyChanging();
				this._HotelId = value;
				this.SendPropertyChanged("HotelId");
				this.OnHotelIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
	public System.Nullable<bool> IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tour_Tours_TourKind", Storage="_Tours_TourKinds", ThisKey="TourId", OtherKey="TourId")]
	public EntitySet<Tours_TourKind> Tours_TourKinds
	{
		get
		{
			return this._Tours_TourKinds;
		}
		set
		{
			this._Tours_TourKinds.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Tour", Storage="_Location", ThisKey="LocaId", OtherKey="LocaId", IsForeignKey=true)]
	public Location Location
	{
		get
		{
			return this._Location.Entity;
		}
		set
		{
			Location previousValue = this._Location.Entity;
			if (((previousValue != value) 
						|| (this._Location.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Location.Entity = null;
					previousValue.Tours.Remove(this);
				}
				this._Location.Entity = value;
				if ((value != null))
				{
					value.Tours.Add(this);
					this._LocaId = value.LocaId;
				}
				else
				{
					this._LocaId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Location");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Tours_TourKinds(Tours_TourKind entity)
	{
		this.SendPropertyChanging();
		entity.Tour = this;
	}
	
	private void detach_Tours_TourKinds(Tours_TourKind entity)
	{
		this.SendPropertyChanging();
		entity.Tour = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tours_TourKinds")]
public partial class Tours_TourKind : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _TourId;
	
	private int _TourKindId;
	
	private EntityRef<TourKind> _TourKind;
	
	private EntityRef<Tour> _Tour;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTourIdChanging(int value);
    partial void OnTourIdChanged();
    partial void OnTourKindIdChanging(int value);
    partial void OnTourKindIdChanged();
    #endregion
	
	public Tours_TourKind()
	{
		this._TourKind = default(EntityRef<TourKind>);
		this._Tour = default(EntityRef<Tour>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourId", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int TourId
	{
		get
		{
			return this._TourId;
		}
		set
		{
			if ((this._TourId != value))
			{
				if (this._Tour.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTourIdChanging(value);
				this.SendPropertyChanging();
				this._TourId = value;
				this.SendPropertyChanged("TourId");
				this.OnTourIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourKindId", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int TourKindId
	{
		get
		{
			return this._TourKindId;
		}
		set
		{
			if ((this._TourKindId != value))
			{
				if (this._TourKind.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTourKindIdChanging(value);
				this.SendPropertyChanging();
				this._TourKindId = value;
				this.SendPropertyChanged("TourKindId");
				this.OnTourKindIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TourKind_Tours_TourKind", Storage="_TourKind", ThisKey="TourKindId", OtherKey="TourKindId", IsForeignKey=true)]
	public TourKind TourKind
	{
		get
		{
			return this._TourKind.Entity;
		}
		set
		{
			TourKind previousValue = this._TourKind.Entity;
			if (((previousValue != value) 
						|| (this._TourKind.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TourKind.Entity = null;
					previousValue.Tours_TourKinds.Remove(this);
				}
				this._TourKind.Entity = value;
				if ((value != null))
				{
					value.Tours_TourKinds.Add(this);
					this._TourKindId = value.TourKindId;
				}
				else
				{
					this._TourKindId = default(int);
				}
				this.SendPropertyChanged("TourKind");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tour_Tours_TourKind", Storage="_Tour", ThisKey="TourId", OtherKey="TourId", IsForeignKey=true)]
	public Tour Tour
	{
		get
		{
			return this._Tour.Entity;
		}
		set
		{
			Tour previousValue = this._Tour.Entity;
			if (((previousValue != value) 
						|| (this._Tour.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Tour.Entity = null;
					previousValue.Tours_TourKinds.Remove(this);
				}
				this._Tour.Entity = value;
				if ((value != null))
				{
					value.Tours_TourKinds.Add(this);
					this._TourId = value.TourId;
				}
				else
				{
					this._TourId = default(int);
				}
				this.SendPropertyChanged("Tour");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Uid;
	
	private string _Usnm;
	
	private string _Pwd;
	
	private string _FullNm;
	
	private System.Nullable<int> _Age;
	
	private System.Nullable<char> _Sex;
	
	private string _Email;
	
	private string _Phone;
	
	private string _HomePhone;
	
	private string _Address1;
	
	private string _Address2;
	
	private System.Nullable<bool> _IsActive;
	
	private System.Nullable<System.DateTime> _LastUpdt;
	
	private EntitySet<UserRole> _UserRoles;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUidChanging(int value);
    partial void OnUidChanged();
    partial void OnUsnmChanging(string value);
    partial void OnUsnmChanged();
    partial void OnPwdChanging(string value);
    partial void OnPwdChanged();
    partial void OnFullNmChanging(string value);
    partial void OnFullNmChanged();
    partial void OnAgeChanging(System.Nullable<int> value);
    partial void OnAgeChanged();
    partial void OnSexChanging(System.Nullable<char> value);
    partial void OnSexChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnHomePhoneChanging(string value);
    partial void OnHomePhoneChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    partial void OnLastUpdtChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdtChanged();
    #endregion
	
	public User()
	{
		this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Uid
	{
		get
		{
			return this._Uid;
		}
		set
		{
			if ((this._Uid != value))
			{
				this.OnUidChanging(value);
				this.SendPropertyChanging();
				this._Uid = value;
				this.SendPropertyChanged("Uid");
				this.OnUidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Usnm", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
	public string Usnm
	{
		get
		{
			return this._Usnm;
		}
		set
		{
			if ((this._Usnm != value))
			{
				this.OnUsnmChanging(value);
				this.SendPropertyChanging();
				this._Usnm = value;
				this.SendPropertyChanged("Usnm");
				this.OnUsnmChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pwd", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Pwd
	{
		get
		{
			return this._Pwd;
		}
		set
		{
			if ((this._Pwd != value))
			{
				this.OnPwdChanging(value);
				this.SendPropertyChanging();
				this._Pwd = value;
				this.SendPropertyChanged("Pwd");
				this.OnPwdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullNm", DbType="NVarChar(250)")]
	public string FullNm
	{
		get
		{
			return this._FullNm;
		}
		set
		{
			if ((this._FullNm != value))
			{
				this.OnFullNmChanging(value);
				this.SendPropertyChanging();
				this._FullNm = value;
				this.SendPropertyChanged("FullNm");
				this.OnFullNmChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int")]
	public System.Nullable<int> Age
	{
		get
		{
			return this._Age;
		}
		set
		{
			if ((this._Age != value))
			{
				this.OnAgeChanging(value);
				this.SendPropertyChanging();
				this._Age = value;
				this.SendPropertyChanged("Age");
				this.OnAgeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="Char(1)")]
	public System.Nullable<char> Sex
	{
		get
		{
			return this._Sex;
		}
		set
		{
			if ((this._Sex != value))
			{
				this.OnSexChanging(value);
				this.SendPropertyChanging();
				this._Sex = value;
				this.SendPropertyChanged("Sex");
				this.OnSexChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomePhone", DbType="NVarChar(50)")]
	public string HomePhone
	{
		get
		{
			return this._HomePhone;
		}
		set
		{
			if ((this._HomePhone != value))
			{
				this.OnHomePhoneChanging(value);
				this.SendPropertyChanging();
				this._HomePhone = value;
				this.SendPropertyChanged("HomePhone");
				this.OnHomePhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address1", DbType="NVarChar(250)")]
	public string Address1
	{
		get
		{
			return this._Address1;
		}
		set
		{
			if ((this._Address1 != value))
			{
				this.OnAddress1Changing(value);
				this.SendPropertyChanging();
				this._Address1 = value;
				this.SendPropertyChanged("Address1");
				this.OnAddress1Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="NVarChar(250)")]
	public string Address2
	{
		get
		{
			return this._Address2;
		}
		set
		{
			if ((this._Address2 != value))
			{
				this.OnAddress2Changing(value);
				this.SendPropertyChanging();
				this._Address2 = value;
				this.SendPropertyChanged("Address2");
				this.OnAddress2Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
	public System.Nullable<bool> IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdt", DbType="Date")]
	public System.Nullable<System.DateTime> LastUpdt
	{
		get
		{
			return this._LastUpdt;
		}
		set
		{
			if ((this._LastUpdt != value))
			{
				this.OnLastUpdtChanging(value);
				this.SendPropertyChanging();
				this._LastUpdt = value;
				this.SendPropertyChanged("LastUpdt");
				this.OnLastUpdtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_UserRoles", ThisKey="Uid", OtherKey="Uid")]
	public EntitySet<UserRole> UserRoles
	{
		get
		{
			return this._UserRoles;
		}
		set
		{
			this._UserRoles.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_UserRoles(UserRole entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_UserRoles(UserRole entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
}
#pragma warning restore 1591
